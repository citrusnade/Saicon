{
  "description": "Generate a full-stack web app with Next.js, Express, and SQLite",
  "prompt": {
    "parts": [
      {
        "text": "あなたはプロのフルスタック開発者兼コードジェネレータです。以下の要件に従い、Next.js + React（TypeScript）をフロントエンド、Node.js + Expressをバックエンド、SQLiteをデータベースに使った完全動作するWebアプリ一式を生成してください。全コード、設定、マイグレーション、READMEを含めて出力してください。\n\n【要件】\n\n1. 認証／ユーザー管理\n   - 招待コード制のシンプルログイン（パスワード不要）\n   - 招待コードは管理者が発行可能\n   - ユーザーはニックネーム登録のみ\n\n2. ロール\n   - 管理者：ポイントの発行・加算・減算が可能\n   - 一般ユーザー：管理者から発行されたポイントを受け取り、他のユーザーに送信可能\n\n3. ポイント送受信機能\n   - ユーザー間で自由にポイントを送受信\n   - 送信フォーム：受信者ニックネーム＋送信ポイント数\n   - 残高チェックおよび負数残高禁止のバリデーション\n\n4. 発行／調整機能\n   - 管理者専用画面で任意ユーザーにポイント発行・調整\n   - 発行・調整履歴を記録\n\n5. トランザクション履歴\n   - 日時、送信者、受信者、ポイント数を一覧表示\n   - 最新順およびユーザー別のソート・フィルタリング機能\n\n6. UI/UX\n   - モバイルファーストでレスポンシブデザイン\n   - ダッシュボード画面：残高、送受信ボタン、履歴タブ\n   - 管理者画面と一般画面をナビゲーションで切り替え可能\n\n7. 環境構築・デプロイ\n   - npm install → npm run dev で即時動作可能\n   - SQLiteファイルはリポジトリに含め、マイグレーション用スクリプトを用意\n   - HerokuやVercelにそのままデプロイ可能な設定\n\n8. テスト\n   - 認証、送受信、発行の主要APIを対象としたJestによる単体テストを各1件以上作成\n\n【出力形式】\n- フロントエンド：/frontend 配下に Next.js プロジェクト\n- バックエンド：/backend 配下に Express サーバー\n- データベース：/backend/db.sqlite3 および /backend/migrations\n- ルートに README.md：セットアップ手順、環境変数説明\n- .env.example：PORT, INVITE_CODES, DATABASE_PATH など\n\n【最終条件】\n- 上記要件を満たす完全なディレクトリ構成とコードを生成すること\n- 生成物は1つのアーカイブ(zip)としてエクスポートできる構成にすること"
      }
    ]
  }
}
