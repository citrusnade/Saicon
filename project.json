{
  "description": "Full-stack web app generation in phases to avoid output limits",
  "prompt": {
    "parts": [
      {
        "text": "あなたはプロのフルスタック開発者兼コードジェネレータです。以下のWebアプリを作成しますが、出力の上限を超えないよう、作業を複数のフェーズに分けて行ってください。\n\n[アプリ要件概要]\n- フロントエンド：Next.js + React（TypeScript）\n- バックエンド：Node.js + Express\n- データベース：SQLite\n- 機能：招待コードログイン、ユーザー間ポイント送受信、管理者によるポイント発行・調整、トランザクション履歴、Jestによる主要APIのテスト\n- UI：モバイルファースト、ダッシュボード（残高、送受信ボタン、履歴タブ）、管理者画面と一般画面の切替\n- 環境：npm install → npm run dev で動作、Heroku/Vercelへのデプロイ設定\n- 出力形式：/frontend, /backend, /backend/db.sqlite3, /backend/migrations, README.md, .env.example\n\n[出力手順]\n- Phase 1：ディレクトリ構成、package.json、初期設定、環境構築手順\n- Phase 2：バックエンド（Expressサーバー、認証API、ポイント送受信API、DBモデルとマイグレーション）\n- Phase 3：フロントエンド（Next.jsのページ、コンポーネント、フォーム、API連携）\n- Phase 4：Jestによるテストコード（認証、送受信、発行）\n- Phase 5：README.md、.env.example、最終的なファイル構造、Zip化手順\n\n次の指示では必ずPhase 1だけを生成してください。次フェーズに進むときはユーザーからの追加リクエストを待ち、Phaseごとに出力を分割してください。"
      }
    ]
  }
}